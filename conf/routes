# Routes
#
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /                           @controllers.Application.index()

GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Web application routes:

GET     /dashboard                  @controllers.Application.configurations()

GET     /tests                      @controllers.TestsController.tests(configuration: Option[Configuration] ?= None, status: Option[TestStatus] ?= None, ignored: Option[Boolean] ?= None, name: Option[String] ?= None, group: Option[String] ?= None, category: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None, sort: Option[Sort] ?= None, descending: Option[Boolean] ?= None)
POST    /tests/undelete             @controllers.TestsController.undeleteTests()
POST    /tests/delete               @controllers.TestsController.deleteTests()
POST    /tests/rerun                @controllers.TestsController.rerunSelectedTests()
POST    /tests/ignore               @controllers.TestsController.ignoreTests(configuration: Configuration)
POST    /tests/unignore             @controllers.TestsController.unignoreTests(configuration: Configuration)

GET     /tests/deleted              @controllers.Application.deletedTests(page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
GET     /tests/stale                @controllers.Application.staleTests(configuration: Option[Configuration] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)

GET     /test/:id                   @controllers.TestController.test(id: Id[Test], configuration: Option[Configuration] ?= None, passed: Option[Boolean] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
POST    /test/:id/delete            @controllers.TestController.deleteTest(id: Id[Test])
POST    /test/:id/undelete          @controllers.TestController.undeleteTest(id: Id[Test])
POST    /test/:id/comment           @controllers.TestController.setTestComment(id: Id[Test], configuration: Option[Configuration] ?= None)
POST    /test/:id/addCategory       @controllers.TestController.addCategory(id: Id[Test])
POST    /test/:id/removeCategory    @controllers.TestController.removeCategory(id: Id[Test])
POST    /test/:id/rerun             @controllers.TestController.rerunTest(id: Id[Test])
POST    /test/:id/ignore            @controllers.TestController.ignoreTestInConfiguration(id: Id[Test], configuration: Configuration)
POST    /test/:id/unignore          @controllers.TestController.unignoreTestInConfiguration(id: Id[Test], configuration: Configuration)

GET     /execution/:id              @controllers.ExecutionController.execution(id: Id[Execution])
POST    /execution/:id/comment      @controllers.ExecutionController.setExecutionComment(id: Id[Execution])

GET     /executions                 @controllers.Application.executions(configuration: Option[Configuration] ?= None, passed: Option[Boolean] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
GET     /executions/logs            @controllers.Application.searchLogs(query: Option[String] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)

GET     /batch/:id                  @controllers.BatchController.batch(id: Id[Batch], passed: Option[Boolean] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
POST    /batch/:id/comment          @controllers.BatchController.setBatchComment(id: Id[Batch])
POST    /batch/:id/delete           @controllers.BatchController.deleteBatch(id: Id[Batch])
GET     /batch/:id/log              @controllers.BatchController.batchLog(id: Id[Batch])

GET     /batches                    @controllers.BatchesController.batches(job: Option[CiJobId] ?= None, configuration: Option[Configuration] ?= None, passed: Option[Boolean] ?= None, page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
POST    /batches/delete             @controllers.BatchesController.deleteBatches()
 
GET     /systemConfiguration        @controllers.Application.editSystemConfiguration
POST    /systemConfiguration        @controllers.Application.updateSystemConfiguration

GET     /ci                         @controllers.ImportSpecController.ciImportSpecs()
GET     /ci/new                     @controllers.ImportSpecController.newCiImportSpec()
POST    /ci/new                     @controllers.ImportSpecController.createCiImportSpec()
GET     /ci/:id/log                 @controllers.ImportLogController.getCiImportSpec(id: Id[CiImportSpec], page: Option[Int] ?= None, pageSize: Option[Int] ?= None)
GET     /ci/:id/edit                @controllers.ImportSpecController.editCiImportSpec(id: Id[CiImportSpec])
POST    /ci/:id/edit                @controllers.ImportSpecController.updateCiImportSpec(id: Id[CiImportSpec])
POST    /ci/:id/delete              @controllers.ImportSpecController.deleteCiImportSpec(id: Id[CiImportSpec])
POST    /ci/:id/sync                @controllers.ImportSpecController.syncCiImport(id: Id[CiImportSpec])

GET     /admin                      @controllers.AdminController.admin()
POST    /deleteAll                  @controllers.AdminController.deleteAll()
POST    /analyseAll                 @controllers.AdminController.analyseAll()

GET     /jenkins/auth               @controllers.JenkinsController.auth()
POST    /jenkins/auth               @controllers.JenkinsController.updateAuth()
GET     /jenkins/reruns             @controllers.JenkinsController.reruns()
POST    /jenkins/reruns             @controllers.JenkinsController.updateReruns()

GET     /teamcity/config            @controllers.TeamCityController.teamCityConfig()
POST    /teamcity/config            @controllers.TeamCityController.updateTeamCityConfig()

# Routes for web application AJAX:

GET     /webApi/tests/names           @controllers.WebApiController.testNames(query: String)
GET     /webApi/tests/groups          @controllers.WebApiController.groups(query: String)
GET     /webApi/categories            @controllers.WebApiController.categories(query: String)
GET     /webApi/configuration/chart   @controllers.WebApiController.configurationChart(configuration: Configuration)
GET     /javascriptRoutes             @controllers.WebApiController.javascriptRoutes

# Routes for external JSON API:

GET     /api/tests                  @controllers.ApiController.getTests(configuration: Option[Configuration] ?= None, status: Option[TestStatus] ?= None)
GET     /api/batches                @controllers.ApiController.getBatches()
POST    /api/batches                @controllers.ApiController.addBatch()
POST    /api/deleteAll              @controllers.ApiController.deleteAll()
POST    /api/batch/:id/executions   @controllers.ApiController.addExecutions(id: Id[Batch])
POST    /api/batch/:id/complete     @controllers.ApiController.completeBatch(id: Id[Batch])

# Routes for test-only API:

POST    /testApi/testing/analyseAllExecutions     @controllers.Application.analyseAllExecutions()